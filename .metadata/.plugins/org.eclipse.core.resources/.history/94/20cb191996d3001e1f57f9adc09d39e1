package com.jsp.hookup.controller;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.tomcat.util.codec.binary.Base64;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.jsp.hookup.model.Room;
import com.jsp.hookup.response.RoomResponse;
import com.jsp.hookup.service.RoomService;

import lombok.RequiredArgsConstructor;


@RestController
@RequiredArgsConstructor
@RequestMapping("/rooms")
public class RoomController {
	
	private final RoomService roomService;
	@CrossOrigin(origins = "http://localhost:5173")
	@PostMapping("/add/new-room")
	public ResponseEntity<RoomResponse> addNewRoom(@RequestParam("photo") MultipartFile photo,@RequestParam("roomType") String roomType,@RequestParam("roomPrice") BigDecimal roomPrice){
		
		Room savedRoom = roomService.addNewRoom(photo, roomType, roomPrice );
		RoomResponse response = new RoomResponse(savedRoom.getId(),savedRoom.getRoomType(),savedRoom.getRoomPrice());
		return ResponseEntity.ok(response);
	}
	
	@CrossOrigin(origins = "*")
	@GetMapping("/rooms/room-types")
	public List<String> getRoomTypes(){
		return roomService.getAllRoomTypes();
	}
	
	public ResponseEntity<List<RoomResponse>> getAllRooms(){
		
		List<Room> rooms = roomService.getAllRooms();
		List<RoomResponse> roomResponses = new ArrayList<>();
		for (Room room : rooms) {
			byte[] photoBytes = roomService.getRoomPhotoByRoomId(room.getId());
			if(photoBytes != null && photoBytes.length > 0) {
				String base64Photo = Base64.encodeBase64String(photoBytes);
				RoomResponse roomResponse = getRoomResponse(room);
				roomResponse.setPhoto(base64Photo);
				roomResponses.add(roomResponse);
			}
			
			
		}
		return ResponseEntity.ok(roomResponses);
	
	}

}
